# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

union GenericMorph = About | Category | I18NLocale | Post | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type About {
    content: String!
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations: [About]!
    localizations_connection: AboutRelationResponseCollection
    publishedAt: DateTime
    title: String!
    updatedAt: DateTime
}

type AboutRelationResponseCollection {
    nodes: [About!]!
}

type Category {
    createdAt: DateTime
    documentId: ID!
    locale: String
    localizations(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Category]!
    localizations_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
    posts(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Post]!
    posts_connection(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PostRelationResponseCollection
    publishedAt: DateTime
    tag: String!
    updatedAt: DateTime
}

type CategoryEntityResponseCollection {
    nodes: [Category!]!
    pageInfo: Pagination!
}

type CategoryRelationResponseCollection {
    nodes: [Category!]!
}

type DeleteMutationResponse {
    documentId: ID!
}

type I18NLocale {
    code: String
    createdAt: DateTime
    documentId: ID!
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
    nodes: [I18NLocale!]!
    pageInfo: Pagination!
}

type Mutation {
    "Change user password. Confirm with the current password."
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    createCategory(
        data: CategoryInput!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Category
    createPost(
        data: PostInput!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Post
    createReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    createReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteAbout(
        "The locale to use for the query"
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    deleteCategory(
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    deletePost(
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode
    ): DeleteMutationResponse
    deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
    deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
    deleteUploadFile(id: ID!): UploadFile
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateAbout(
        data: AboutInput!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): About
    updateCategory(
        data: CategoryInput!,
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Category
    updatePost(
        data: PostInput!,
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Post
    updateReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    updateReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Post {
    author: String
    categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Category]!
    categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
    content: String!
    cover: UploadFile
    createdAt: DateTime
    documentId: ID!
    downvotes: Int
    isNSFW: Boolean
    locale: String
    localizations(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Post]!
    localizations_connection(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PostRelationResponseCollection
    publishedAt: DateTime
    slug: String!
    title: String!
    updatedAt: DateTime
    upvotes: Int
}

type PostEntityResponseCollection {
    nodes: [Post!]!
    pageInfo: Pagination!
}

type PostRelationResponseCollection {
    nodes: [Post!]!
}

type Query {
    about(
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): About
    categories(
        filters: CategoryFiltersInput,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        pagination: PaginationArg = {},
        sort: [String] = [],
        status: PublicationStatus = PUBLISHED
    ): [Category]!
    categories_connection(
        filters: CategoryFiltersInput,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        pagination: PaginationArg = {},
        sort: [String] = [],
        status: PublicationStatus = PUBLISHED
    ): CategoryEntityResponseCollection
    category(
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Category
    i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
    i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    post(
        documentId: ID!,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        status: PublicationStatus = PUBLISHED
    ): Post
    posts(
        filters: PostFiltersInput,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        pagination: PaginationArg = {},
        sort: [String] = [],
        status: PublicationStatus = PUBLISHED
    ): [Post]!
    posts_connection(
        filters: PostFiltersInput,
        "The locale to use for the query"
        locale: I18NLocaleCode,
        pagination: PaginationArg = {},
        sort: [String] = [],
        status: PublicationStatus = PUBLISHED
    ): PostEntityResponseCollection
    reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
    reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
    reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
    reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
    uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
    uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
    usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
    usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
    usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
}

type ReviewWorkflowsWorkflow {
    contentTypes: JSON!
    createdAt: DateTime
    documentId: ID!
    name: String!
    publishedAt: DateTime
    stageRequiredToPublish: ReviewWorkflowsWorkflowStage
    stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    updatedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStage {
    color: String
    createdAt: DateTime
    documentId: ID!
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
    workflow: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    documentId: ID!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    publishedAt: DateTime
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntityResponseCollection {
    nodes: [UploadFile!]!
    pageInfo: Pagination!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    documentId: ID!
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    documentId: ID!
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
    nodes: [UsersPermissionsPermission!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    documentId: ID!
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    publishedAt: DateTime
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntityResponseCollection {
    nodes: [UsersPermissionsRole!]!
    pageInfo: Pagination!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    documentId: ID!
    email: String!
    provider: String
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
    nodes: [UsersPermissionsUser!]!
    pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
    nodes: [UsersPermissionsUser!]!
}

enum PublicationStatus {
    DRAFT
    PUBLISHED
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A string used to identify an i18n locale"
scalar I18NLocaleCode

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input AboutInput {
    content: String
    publishedAt: DateTime
    title: String
}

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    eqi: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nei: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input CategoryFiltersInput {
    and: [CategoryFiltersInput]
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: CategoryFiltersInput
    not: CategoryFiltersInput
    or: [CategoryFiltersInput]
    posts: PostFiltersInput
    publishedAt: DateTimeFilterInput
    tag: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input CategoryInput {
    posts: [ID]
    publishedAt: DateTime
    tag: String
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    nei: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nei: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    nei: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nei: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    nei: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input PostFiltersInput {
    and: [PostFiltersInput]
    author: StringFilterInput
    categories: CategoryFiltersInput
    content: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    downvotes: IntFilterInput
    isNSFW: BooleanFilterInput
    locale: StringFilterInput
    localizations: PostFiltersInput
    not: PostFiltersInput
    or: [PostFiltersInput]
    publishedAt: DateTimeFilterInput
    slug: StringFilterInput
    title: StringFilterInput
    updatedAt: DateTimeFilterInput
    upvotes: IntFilterInput
}

input PostInput {
    author: String
    categories: [ID]
    content: String
    cover: ID
    downvotes: Int
    isNSFW: Boolean
    publishedAt: DateTime
    slug: String
    title: String
    upvotes: Int
}

input ReviewWorkflowsWorkflowFiltersInput {
    and: [ReviewWorkflowsWorkflowFiltersInput]
    contentTypes: JSONFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowFiltersInput
    or: [ReviewWorkflowsWorkflowFiltersInput]
    publishedAt: DateTimeFilterInput
    stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput
    stages: ReviewWorkflowsWorkflowStageFiltersInput
    updatedAt: DateTimeFilterInput
}

input ReviewWorkflowsWorkflowInput {
    contentTypes: JSON
    name: String
    publishedAt: DateTime
    stageRequiredToPublish: ID
    stages: [ID]
}

input ReviewWorkflowsWorkflowStageFiltersInput {
    and: [ReviewWorkflowsWorkflowStageFiltersInput]
    color: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowStageFiltersInput
    or: [ReviewWorkflowsWorkflowStageFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    workflow: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
    color: String
    name: String
    publishedAt: DateTime
    workflow: ID
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nei: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    ext: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    publishedAt: DateTimeFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    publishedAt: DateTimeFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    documentId: IDFilterInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    publishedAt: DateTimeFilterInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    name: String
    permissions: [ID]
    publishedAt: DateTime
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    email: StringFilterInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    provider: StringFilterInput
    publishedAt: DateTimeFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmed: Boolean
    email: String
    password: String
    provider: String
    publishedAt: DateTime
    role: ID
    username: String
}
